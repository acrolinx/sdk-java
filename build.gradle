import java.time.Duration

plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'com.diffplug.spotless' version '6.25.0'
}

repositories {
    mavenCentral()
    maven {
        url "https://ajoberstar.org/bintray-backup/"
        name "ajoberstar-backup"
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'com.google.guava:guava:33.1.0-jre'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'io.gsonfire:gson-fire:1.9.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'io.github.cdimascio:dotenv-java:3.0.0'
    testImplementation 'org.wiremock:wiremock:3.4.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

group = 'com.acrolinx.client'
version = currentVersion

final String artifactName = "sdk"
final boolean isReleaseBuild = !currentVersion.contains('SNAPSHOT')

final String sonatypeUsername = hasProperty('sonatypeUsername') && sonatypeUsername.length() > 0 ? sonatypeUsername : System.getenv('SONATYPE_USERNAME')
final String sonatypePassword = hasProperty('sonatypePassword') && sonatypePassword.length() > 0 ? sonatypePassword : System.getenv('SONATYPE_PW')

final String devId = "Acrolinx Open Source"
final String devName = "Acrolinx"
final String devEmail = "opensource@acrolinx.com"

compileJava {
    options.encoding = "UTF-8"
}

compileTestJava {
    options.encoding = "UTF-8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": artifactName,
                "Implementation-Version": version,
                "Specification-Title": artifactName,
                "Specification-Version": version
        )
    }
    from(project.projectDir) {
        include 'LICENSE'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

nexusPublishing {
    connectTimeout = Duration.ofMinutes(5)
    clientTimeout = Duration.ofMinutes(5)
    repositories {
        sonatype {
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}

nexusStaging {
    numberOfRetries = 40
    delayBetweenRetriesInMillis = 4000
    username = sonatypeUsername
    password = sonatypePassword
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.acrolinx.client'
            artifactId = 'sdk'
            from components.java

            pom {
                name = 'Acrolinx Platform SDK'
                description = 'A library to interact with the Acrolinx Platform.'
                url = 'https://github.com/acrolinx/sdk-java'
                scm {
                    url = 'https://github.com/acrolinx/sdk-java'
                    connection = 'scm:git@github.com:acrolinx/sdk-java.git'
                    developerConnection = 'scm:git@github.com:acrolinx/sdk-java.git'
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = devId
                        name = devName
                        email = devEmail
                        organization = 'Acrolinx'
                        organizationUrl = 'https://www.acrolinx.com/'
                    }
                }
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (isReleaseBuild) {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            } else {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            }
        }
    }
}

signing {
    final String signingKey = findProperty("signingKey")
    final String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

sonar {
    properties {
        property "sonar.organization", "acrolinx"
        property "sonar.projectKey", "acrolinx_sdk-java"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        licenseHeader '/* Copyright (c) $YEAR Acrolinx GmbH */'
    }
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.sh'

        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

task createGithubReleaseTag {
    doLast {
        println 'Creating Github Release Tag'
        if (isReleaseBuild) {
            grgit.open(currentDir: rootDir)
            boolean hasOldReleaseVersion = grgit.tag.list().find { it.getName() == "release-${project.version}" }
            println 'Finding tags'
            if (!hasOldReleaseVersion) {
                println 'is new release version'
            } else {
                println 'This version was already released'
            }
        } else {
            throw new GradleException('NO APPROPRIATE RELEASE VERSION')
        }
    }
}
