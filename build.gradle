import groovy.transform.Field

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
import java.util.stream.Collectors

plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.diffplug.spotless' version '6.25.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:2.0.13'
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'io.gsonfire:gson-fire:1.9.0'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'io.github.cdimascio:dotenv-java:3.0.1'
    testImplementation 'org.wiremock:wiremock:3.7.0'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.6'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

group = 'com.acrolinx.client'
version = currentVersion

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
                'Specification-Title': rootProject.name,
                'Specification-Version': version
        )
    }
    from(project.projectDir) {
        include 'LICENSE'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }

    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            pom {
                name.set('sdk-java')
                description.set('A library to interact with the Acrolinx Platform.')
                url.set('https://github.com/acrolinx/sdk-java')
                licenses {
                    license {
                        name.set('The Apache Software License, Version 2.0')
                        url.set('https://www.apache.org/licenses/LICENSE-2.0.txt')
                    }
                }
                developers {
                    developer {
                        id.set('Acrolinx Open Source')
                        name.set('Acrolinx')
                        email.set('opensource@acrolinx.com')
                    }
                }
                scm {
                    connection.set('scm:git@github.com:acrolinx/sdk-java.git')
                    developerConnection.set('scm:git@github.com:acrolinx/sdk-java.git')
                    url.set('https://github.com/acrolinx/sdk-java')
                }
            }
        }
    }
}

signing {
    required = false
    final String signingKey = findProperty('signingKey')
    final String signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

sonar {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'acrolinx'
        property 'sonar.projectKey', 'acrolinx_sdk-java'
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        licenseHeader '/* Copyright (c) $YEAR Acrolinx GmbH */'
    }
    format 'misc', {
        target '.gitignore', '*.gradle', '*.md', '*.properties'

        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
}

tasks.register('incrementSnapshotVersion') {
    doLast {
        println("Current version: $currentVersion")
        final String newSnapshotVersion = createNewSnapshotVersion(currentVersion)

        println("New snapshot version: $newSnapshotVersion")

        updateVersionProperty(newSnapshotVersion)

        setGitHubOutput('NEW_SNAPSHOT_VERSION', newSnapshotVersion)
    }
}

tasks.register('removeSnapshotSuffix') {
    doLast {
        println("Current version: $currentVersion")

        if (!currentVersion.endsWith(SNAPSHOT_SUFFIX)) {
            throw new IllegalStateException('Current version is not a snapshot: ' + currentVersion)
        }

        final String releaseVersion = currentVersion.replace(SNAPSHOT_SUFFIX, '')

        println("Stable version: $releaseVersion")

        updateVersionProperty(releaseVersion)

        setGitHubOutput('OLD_SNAPSHOT_VERSION', "$currentVersion")
        setGitHubOutput('RELEASE_VERSION', "$releaseVersion")
    }
}

@Field
private static final String SNAPSHOT_SUFFIX = '-SNAPSHOT'

private static String createNewSnapshotVersion(final String versionString) {
    final String[] versionParts = versionString.split('\\.')
    final int incrementedPatchVersion = Integer.parseInt(versionParts[versionParts.length - 1]) + 1

    return versionParts[0] + '.' + versionParts[1] + '.' + incrementedPatchVersion + SNAPSHOT_SUFFIX
}

private static void setGitHubOutput(final String name, final String value) {
    final String gitHubOutput = System.getenv('GITHUB_OUTPUT')
    final java.nio.file.Path gitHubOutputPath = Paths.get(gitHubOutput)
    Files.write(gitHubOutputPath, "$name=$value\n".getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND)
}

private static void updateVersionProperty(final String versionString) {
    final String propertyName = 'currentVersion'

    final java.nio.file.Path gradlePropertiesPath = Paths.get('gradle.properties')

    if (!Files.exists(gradlePropertiesPath)) {
        throw new IllegalStateException('File does not exist: ' + gradlePropertiesPath)
    }

    final List<String> propertyFileContent = Files.readAllLines(gradlePropertiesPath)

    final List<String> updatedPropertyFileContent = propertyFileContent.stream()
            .map(line -> {
                if (line.startsWith("$propertyName=")) {
                    "$propertyName=$versionString"
                } else {
                    line
                }
            })
            .collect(Collectors.toList())

    Files.write(gradlePropertiesPath, updatedPropertyFileContent)
}
