/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.acrolinx.client.sdk;

import com.acrolinx.client.sdk.exceptions.SSOException;
import com.acrolinx.client.sdk.exceptions.SignInException;
import com.acrolinx.client.sdk.platform.Capabilities;
import com.google.gson.Gson;
import org.apache.http.HttpEntity;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class AcrolinxEndpoint {

    private String clientSignature;
    private String clientVersion;
    private String clientLocale;
    private String acrolinxUrl;
    private RequestConfig config;
    private String apiVersion;

    private CloseableHttpClient httpClient;

    // Constructor with four params?
    public AcrolinxEndpoint(String clientSignature, String acrolinxURL, String clientVersion, String clientLocale) {

        this.apiVersion = "api/v1/";

        this.clientSignature = clientSignature;
        this.clientVersion = clientVersion;
        this.clientLocale = clientLocale;
        this.acrolinxUrl = acrolinxURL;

        // Is the default closeable http client the best choice?
        // Can it handle forward proxies? In AEM it didn't
        httpClient = HttpClients.createDefault();

        // Do we need this? Right place? Right values?
        config = RequestConfig.custom().setConnectTimeout(500).setConnectionRequestTimeout(500).setSocketTimeout(500)
                .build();

    }

    // use logger from sidebar-sdk
    public PlatformInformation getPlatformInformation() throws IOException, URISyntaxException {
        // works without authentication

        HttpGet httpGet = createHttpGet("");
        httpGet = (HttpGet) setCommonHeaders(httpGet, null);
        CloseableHttpResponse response = httpClient.execute(httpGet);

        if (!validateResponse(response)) {
            // throw exception, log error
        }

        return (PlatformInformation) getObjectfromResponseStream(response, PlatformInformation.class);
    }

    public SignInSuccess signInWithSSO(String genericToken, String username) throws SSOException {

        String api = "api/v1/auth/sign-ins";

        return null;
    }

    public SignInSuccess singInInteractive(InteractiveCallback callback) throws SignInException {
        singInInteractive(callback, null);
        return null;
    }

    public SignInSuccess singInInteractive(InteractiveCallback callback, String accessToken) throws SignInException {
        return null;
    }

    public Capabilities getCapabilities(AccessToken accessToken) {
        return null;
    }

    private boolean validateResponse(CloseableHttpResponse response) {

        int statusCode = response.getStatusLine().getStatusCode();
        return statusCode >= 200 && statusCode <= 299;

    }

    private HttpGet createHttpGet(String api) throws IOException, URISyntaxException {

        // Separate class for Http execution?
        URI apiUri = buildUri(this.apiVersion, api);
        HttpGet request = new HttpGet(apiUri);
        request.setConfig(this.config);

        return request;
    }

    private URI buildUri(String apiVersion, String api) throws URISyntaxException {
        URI acrolinxUri = new URI(this.acrolinxUrl);
        return new URIBuilder().setScheme(acrolinxUri.getScheme()).setPort(acrolinxUri.getPort())
                .setHost(acrolinxUri.getHost()).setPath(apiVersion + api).build();
    }

    // Separate class for modifying http request?
    private HttpRequestBase setCommonHeaders(HttpRequestBase request, AccessToken accessToken) {

        if (accessToken != null && !accessToken.getAccessToken().isEmpty()) {
            request.setHeader("X-Acrolinx-Auth", accessToken.getAccessToken());
        }
        request.setHeader("X-Acrolinx-Base-Url", this.acrolinxUrl);
        request.setHeader("X-Acrolinx-Client-Locale", this.clientLocale);
        request.setHeader("X-Acrolinx-Client", this.clientSignature + this.clientVersion);

        return request;

    }

    // Find a new home for helping methods
    private Object getObjectfromResponseStream(CloseableHttpResponse response, Class c) throws IOException {

        HttpEntity responseEntity = response.getEntity();
        String json = EntityUtils.toString(responseEntity);

        Gson gson = new Gson();
        return gson.fromJson(json, c);

    }

}